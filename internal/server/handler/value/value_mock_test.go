// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package value

import (
	"context"

	"github.com/LekcRg/metrics/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMetricGetter creates a new instance of MockMetricGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricGetter {
	mock := &MockMetricGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetricGetter is an autogenerated mock type for the MetricGetter type
type MockMetricGetter struct {
	mock.Mock
}

type MockMetricGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricGetter) EXPECT() *MockMetricGetter_Expecter {
	return &MockMetricGetter_Expecter{mock: &_m.Mock}
}

// GetMetric provides a mock function for the type MockMetricGetter
func (_mock *MockMetricGetter) GetMetric(ctx context.Context, reqName string, reqType string) (string, error) {
	ret := _mock.Called(ctx, reqName, reqType)

	if len(ret) == 0 {
		panic("no return value specified for GetMetric")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, reqName, reqType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, reqName, reqType)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, reqName, reqType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricGetter_GetMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetric'
type MockMetricGetter_GetMetric_Call struct {
	*mock.Call
}

// GetMetric is a helper method to define mock.On call
//   - ctx
//   - reqName
//   - reqType
func (_e *MockMetricGetter_Expecter) GetMetric(ctx interface{}, reqName interface{}, reqType interface{}) *MockMetricGetter_GetMetric_Call {
	return &MockMetricGetter_GetMetric_Call{Call: _e.mock.On("GetMetric", ctx, reqName, reqType)}
}

func (_c *MockMetricGetter_GetMetric_Call) Run(run func(ctx context.Context, reqName string, reqType string)) *MockMetricGetter_GetMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMetricGetter_GetMetric_Call) Return(s string, err error) *MockMetricGetter_GetMetric_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMetricGetter_GetMetric_Call) RunAndReturn(run func(ctx context.Context, reqName string, reqType string) (string, error)) *MockMetricGetter_GetMetric_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetricJSON provides a mock function for the type MockMetricGetter
func (_mock *MockMetricGetter) GetMetricJSON(ctx context.Context, json models.Metrics) (models.Metrics, error) {
	ret := _mock.Called(ctx, json)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricJSON")
	}

	var r0 models.Metrics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Metrics) (models.Metrics, error)); ok {
		return returnFunc(ctx, json)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Metrics) models.Metrics); ok {
		r0 = returnFunc(ctx, json)
	} else {
		r0 = ret.Get(0).(models.Metrics)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.Metrics) error); ok {
		r1 = returnFunc(ctx, json)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricGetter_GetMetricJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricJSON'
type MockMetricGetter_GetMetricJSON_Call struct {
	*mock.Call
}

// GetMetricJSON is a helper method to define mock.On call
//   - ctx
//   - json
func (_e *MockMetricGetter_Expecter) GetMetricJSON(ctx interface{}, json interface{}) *MockMetricGetter_GetMetricJSON_Call {
	return &MockMetricGetter_GetMetricJSON_Call{Call: _e.mock.On("GetMetricJSON", ctx, json)}
}

func (_c *MockMetricGetter_GetMetricJSON_Call) Run(run func(ctx context.Context, json models.Metrics)) *MockMetricGetter_GetMetricJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Metrics))
	})
	return _c
}

func (_c *MockMetricGetter_GetMetricJSON_Call) Return(metrics models.Metrics, err error) *MockMetricGetter_GetMetricJSON_Call {
	_c.Call.Return(metrics, err)
	return _c
}

func (_c *MockMetricGetter_GetMetricJSON_Call) RunAndReturn(run func(ctx context.Context, json models.Metrics) (models.Metrics, error)) *MockMetricGetter_GetMetricJSON_Call {
	_c.Call.Return(run)
	return _c
}
