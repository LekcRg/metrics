// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/LekcRg/metrics/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMetricService creates a new instance of MockMetricService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricService {
	mock := &MockMetricService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetricService is an autogenerated mock type for the MetricService type
type MockMetricService struct {
	mock.Mock
}

type MockMetricService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricService) EXPECT() *MockMetricService_Expecter {
	return &MockMetricService_Expecter{mock: &_m.Mock}
}

// UpdateMany provides a mock function for the type MockMetricService
func (_mock *MockMetricService) UpdateMany(ctx context.Context, list []models.Metrics) error {
	ret := _mock.Called(ctx, list)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []models.Metrics) error); ok {
		r0 = returnFunc(ctx, list)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMetricService_UpdateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMany'
type MockMetricService_UpdateMany_Call struct {
	*mock.Call
}

// UpdateMany is a helper method to define mock.On call
//   - ctx
//   - list
func (_e *MockMetricService_Expecter) UpdateMany(ctx interface{}, list interface{}) *MockMetricService_UpdateMany_Call {
	return &MockMetricService_UpdateMany_Call{Call: _e.mock.On("UpdateMany", ctx, list)}
}

func (_c *MockMetricService_UpdateMany_Call) Run(run func(ctx context.Context, list []models.Metrics)) *MockMetricService_UpdateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.Metrics))
	})
	return _c
}

func (_c *MockMetricService_UpdateMany_Call) Return(err error) *MockMetricService_UpdateMany_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMetricService_UpdateMany_Call) RunAndReturn(run func(ctx context.Context, list []models.Metrics) error) *MockMetricService_UpdateMany_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMetric provides a mock function for the type MockMetricService
func (_mock *MockMetricService) UpdateMetric(ctx context.Context, reqName string, reqType string, reqValue string) error {
	ret := _mock.Called(ctx, reqName, reqType, reqValue)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetric")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, reqName, reqType, reqValue)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMetricService_UpdateMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMetric'
type MockMetricService_UpdateMetric_Call struct {
	*mock.Call
}

// UpdateMetric is a helper method to define mock.On call
//   - ctx
//   - reqName
//   - reqType
//   - reqValue
func (_e *MockMetricService_Expecter) UpdateMetric(ctx interface{}, reqName interface{}, reqType interface{}, reqValue interface{}) *MockMetricService_UpdateMetric_Call {
	return &MockMetricService_UpdateMetric_Call{Call: _e.mock.On("UpdateMetric", ctx, reqName, reqType, reqValue)}
}

func (_c *MockMetricService_UpdateMetric_Call) Run(run func(ctx context.Context, reqName string, reqType string, reqValue string)) *MockMetricService_UpdateMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockMetricService_UpdateMetric_Call) Return(err error) *MockMetricService_UpdateMetric_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMetricService_UpdateMetric_Call) RunAndReturn(run func(ctx context.Context, reqName string, reqType string, reqValue string) error) *MockMetricService_UpdateMetric_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMetricJSON provides a mock function for the type MockMetricService
func (_mock *MockMetricService) UpdateMetricJSON(ctx context.Context, json models.Metrics) (models.Metrics, error) {
	ret := _mock.Called(ctx, json)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetricJSON")
	}

	var r0 models.Metrics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Metrics) (models.Metrics, error)); ok {
		return returnFunc(ctx, json)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Metrics) models.Metrics); ok {
		r0 = returnFunc(ctx, json)
	} else {
		r0 = ret.Get(0).(models.Metrics)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.Metrics) error); ok {
		r1 = returnFunc(ctx, json)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricService_UpdateMetricJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMetricJSON'
type MockMetricService_UpdateMetricJSON_Call struct {
	*mock.Call
}

// UpdateMetricJSON is a helper method to define mock.On call
//   - ctx
//   - json
func (_e *MockMetricService_Expecter) UpdateMetricJSON(ctx interface{}, json interface{}) *MockMetricService_UpdateMetricJSON_Call {
	return &MockMetricService_UpdateMetricJSON_Call{Call: _e.mock.On("UpdateMetricJSON", ctx, json)}
}

func (_c *MockMetricService_UpdateMetricJSON_Call) Run(run func(ctx context.Context, json models.Metrics)) *MockMetricService_UpdateMetricJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Metrics))
	})
	return _c
}

func (_c *MockMetricService_UpdateMetricJSON_Call) Return(metrics models.Metrics, err error) *MockMetricService_UpdateMetricJSON_Call {
	_c.Call.Return(metrics, err)
	return _c
}

func (_c *MockMetricService_UpdateMetricJSON_Call) RunAndReturn(run func(ctx context.Context, json models.Metrics) (models.Metrics, error)) *MockMetricService_UpdateMetricJSON_Call {
	_c.Call.Return(run)
	return _c
}
