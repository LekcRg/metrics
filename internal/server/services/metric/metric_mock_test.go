// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metric

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// Save provides a mock function for the type MockStore
func (_mock *MockStore) Save(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockStore_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx
func (_e *MockStore_Expecter) Save(ctx interface{}) *MockStore_Save_Call {
	return &MockStore_Save_Call{Call: _e.mock.On("Save", ctx)}
}

func (_c *MockStore_Save_Call) Run(run func(ctx context.Context)) *MockStore_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_Save_Call) Return(err error) *MockStore_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_Save_Call) RunAndReturn(run func(ctx context.Context) error) *MockStore_Save_Call {
	_c.Call.Return(run)
	return _c
}
