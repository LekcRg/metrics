// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/LekcRg/metrics/internal/server/storage"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockStorage
func (_mock *MockStorage) Close() {
	_mock.Called()
	return
}

// MockStorage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStorage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStorage_Expecter) Close() *MockStorage_Close_Call {
	return &MockStorage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStorage_Close_Call) Run(run func()) *MockStorage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_Close_Call) Return() *MockStorage_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStorage_Close_Call) RunAndReturn(run func()) *MockStorage_Close_Call {
	_c.Run(run)
	return _c
}

// GetAll provides a mock function for the type MockStorage
func (_mock *MockStorage) GetAll(ctx context.Context) (storage.Database, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 storage.Database
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (storage.Database, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) storage.Database); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(storage.Database)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockStorage_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx
func (_e *MockStorage_Expecter) GetAll(ctx interface{}) *MockStorage_GetAll_Call {
	return &MockStorage_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockStorage_GetAll_Call) Run(run func(ctx context.Context)) *MockStorage_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorage_GetAll_Call) Return(database storage.Database, err error) *MockStorage_GetAll_Call {
	_c.Call.Return(database, err)
	return _c
}

func (_c *MockStorage_GetAll_Call) RunAndReturn(run func(ctx context.Context) (storage.Database, error)) *MockStorage_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetCounterByName provides a mock function for the type MockStorage
func (_mock *MockStorage) GetCounterByName(ctx context.Context, name string) (storage.Counter, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetCounterByName")
	}

	var r0 storage.Counter
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (storage.Counter, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) storage.Counter); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(storage.Counter)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetCounterByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCounterByName'
type MockStorage_GetCounterByName_Call struct {
	*mock.Call
}

// GetCounterByName is a helper method to define mock.On call
//   - ctx
//   - name
func (_e *MockStorage_Expecter) GetCounterByName(ctx interface{}, name interface{}) *MockStorage_GetCounterByName_Call {
	return &MockStorage_GetCounterByName_Call{Call: _e.mock.On("GetCounterByName", ctx, name)}
}

func (_c *MockStorage_GetCounterByName_Call) Run(run func(ctx context.Context, name string)) *MockStorage_GetCounterByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_GetCounterByName_Call) Return(counter storage.Counter, err error) *MockStorage_GetCounterByName_Call {
	_c.Call.Return(counter, err)
	return _c
}

func (_c *MockStorage_GetCounterByName_Call) RunAndReturn(run func(ctx context.Context, name string) (storage.Counter, error)) *MockStorage_GetCounterByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetGaugeByName provides a mock function for the type MockStorage
func (_mock *MockStorage) GetGaugeByName(ctx context.Context, name string) (storage.Gauge, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetGaugeByName")
	}

	var r0 storage.Gauge
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (storage.Gauge, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) storage.Gauge); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(storage.Gauge)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetGaugeByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGaugeByName'
type MockStorage_GetGaugeByName_Call struct {
	*mock.Call
}

// GetGaugeByName is a helper method to define mock.On call
//   - ctx
//   - name
func (_e *MockStorage_Expecter) GetGaugeByName(ctx interface{}, name interface{}) *MockStorage_GetGaugeByName_Call {
	return &MockStorage_GetGaugeByName_Call{Call: _e.mock.On("GetGaugeByName", ctx, name)}
}

func (_c *MockStorage_GetGaugeByName_Call) Run(run func(ctx context.Context, name string)) *MockStorage_GetGaugeByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_GetGaugeByName_Call) Return(gauge storage.Gauge, err error) *MockStorage_GetGaugeByName_Call {
	_c.Call.Return(gauge, err)
	return _c
}

func (_c *MockStorage_GetGaugeByName_Call) RunAndReturn(run func(ctx context.Context, name string) (storage.Gauge, error)) *MockStorage_GetGaugeByName_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockStorage
func (_mock *MockStorage) Ping(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockStorage_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx
func (_e *MockStorage_Expecter) Ping(ctx interface{}) *MockStorage_Ping_Call {
	return &MockStorage_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockStorage_Ping_Call) Run(run func(ctx context.Context)) *MockStorage_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorage_Ping_Call) Return(err error) *MockStorage_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_Ping_Call) RunAndReturn(run func(ctx context.Context) error) *MockStorage_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCounter provides a mock function for the type MockStorage
func (_mock *MockStorage) UpdateCounter(ctx context.Context, name string, value storage.Counter) (storage.Counter, error) {
	ret := _mock.Called(ctx, name, value)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCounter")
	}

	var r0 storage.Counter
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, storage.Counter) (storage.Counter, error)); ok {
		return returnFunc(ctx, name, value)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, storage.Counter) storage.Counter); ok {
		r0 = returnFunc(ctx, name, value)
	} else {
		r0 = ret.Get(0).(storage.Counter)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, storage.Counter) error); ok {
		r1 = returnFunc(ctx, name, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_UpdateCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCounter'
type MockStorage_UpdateCounter_Call struct {
	*mock.Call
}

// UpdateCounter is a helper method to define mock.On call
//   - ctx
//   - name
//   - value
func (_e *MockStorage_Expecter) UpdateCounter(ctx interface{}, name interface{}, value interface{}) *MockStorage_UpdateCounter_Call {
	return &MockStorage_UpdateCounter_Call{Call: _e.mock.On("UpdateCounter", ctx, name, value)}
}

func (_c *MockStorage_UpdateCounter_Call) Run(run func(ctx context.Context, name string, value storage.Counter)) *MockStorage_UpdateCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(storage.Counter))
	})
	return _c
}

func (_c *MockStorage_UpdateCounter_Call) Return(counter storage.Counter, err error) *MockStorage_UpdateCounter_Call {
	_c.Call.Return(counter, err)
	return _c
}

func (_c *MockStorage_UpdateCounter_Call) RunAndReturn(run func(ctx context.Context, name string, value storage.Counter) (storage.Counter, error)) *MockStorage_UpdateCounter_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGauge provides a mock function for the type MockStorage
func (_mock *MockStorage) UpdateGauge(ctx context.Context, name string, value storage.Gauge) (storage.Gauge, error) {
	ret := _mock.Called(ctx, name, value)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGauge")
	}

	var r0 storage.Gauge
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, storage.Gauge) (storage.Gauge, error)); ok {
		return returnFunc(ctx, name, value)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, storage.Gauge) storage.Gauge); ok {
		r0 = returnFunc(ctx, name, value)
	} else {
		r0 = ret.Get(0).(storage.Gauge)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, storage.Gauge) error); ok {
		r1 = returnFunc(ctx, name, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_UpdateGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGauge'
type MockStorage_UpdateGauge_Call struct {
	*mock.Call
}

// UpdateGauge is a helper method to define mock.On call
//   - ctx
//   - name
//   - value
func (_e *MockStorage_Expecter) UpdateGauge(ctx interface{}, name interface{}, value interface{}) *MockStorage_UpdateGauge_Call {
	return &MockStorage_UpdateGauge_Call{Call: _e.mock.On("UpdateGauge", ctx, name, value)}
}

func (_c *MockStorage_UpdateGauge_Call) Run(run func(ctx context.Context, name string, value storage.Gauge)) *MockStorage_UpdateGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(storage.Gauge))
	})
	return _c
}

func (_c *MockStorage_UpdateGauge_Call) Return(gauge storage.Gauge, err error) *MockStorage_UpdateGauge_Call {
	_c.Call.Return(gauge, err)
	return _c
}

func (_c *MockStorage_UpdateGauge_Call) RunAndReturn(run func(ctx context.Context, name string, value storage.Gauge) (storage.Gauge, error)) *MockStorage_UpdateGauge_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMany provides a mock function for the type MockStorage
func (_mock *MockStorage) UpdateMany(ctx context.Context, list storage.Database) error {
	ret := _mock.Called(ctx, list)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.Database) error); ok {
		r0 = returnFunc(ctx, list)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_UpdateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMany'
type MockStorage_UpdateMany_Call struct {
	*mock.Call
}

// UpdateMany is a helper method to define mock.On call
//   - ctx
//   - list
func (_e *MockStorage_Expecter) UpdateMany(ctx interface{}, list interface{}) *MockStorage_UpdateMany_Call {
	return &MockStorage_UpdateMany_Call{Call: _e.mock.On("UpdateMany", ctx, list)}
}

func (_c *MockStorage_UpdateMany_Call) Run(run func(ctx context.Context, list storage.Database)) *MockStorage_UpdateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.Database))
	})
	return _c
}

func (_c *MockStorage_UpdateMany_Call) Return(err error) *MockStorage_UpdateMany_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_UpdateMany_Call) RunAndReturn(run func(ctx context.Context, list storage.Database) error) *MockStorage_UpdateMany_Call {
	_c.Call.Return(run)
	return _c
}
