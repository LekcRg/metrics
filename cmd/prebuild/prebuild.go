package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"os"
	"os/exec"
	"text/template"
	"time"
)

func getDate() string {
	return time.Now().Format(time.RFC822Z)
}

func getLastCommit() string {
	out, err := exec.Command(
		"git", "log", "--pretty=format:%Creset%s", "--no-merges", "-1",
	).Output()

	if err != nil {
		fmt.Println(err)
		return "N/A"
	}

	return string(out)
}

func main() {
	buildInfo := struct {
		Version string
		Date    string
		Commit  string
	}{}
	flag.StringVar(&buildInfo.Version, "version", "", "build version")
	flag.StringVar(&buildInfo.Date, "date", "", "build date")
	flag.StringVar(&buildInfo.Commit, "commit", "", "build commit")
	flag.Parse()

	if buildInfo.Version == "" {
		buildInfo.Version = "N/A"
	}

	if buildInfo.Date == "" {
		buildInfo.Date = getDate()
	}

	if buildInfo.Commit == "" {
		buildInfo.Commit = getLastCommit()
	}

	templateStr := `// Code generated by prebuild.go; DO NOT EDIT.
package main

import "fmt"

var (
	buildVersion string
	buildDate    string
	buildCommit  string
)

func init() {
	buildVersion = "{{.Version}}"
	buildDate = "{{.Date}}"
	buildCommit = "{{.Commit}}"

	fmt.Println("Build version: " + buildVersion)
	fmt.Println("Build date: " + buildDate)
	fmt.Println("Build commit: " + buildCommit)
}`

	tmpl, err := template.New("buildInfo").Parse(templateStr)
	if err != nil {
		panic(err)
	}

	var buf bytes.Buffer
	err = tmpl.Execute(&buf, buildInfo)
	if err != nil {
		panic(err)
	}

	bufFmt, err := format.Source(buf.Bytes())
	if err != nil {
		panic(err)
	}

	err = os.WriteFile("vars.go", bufFmt, 0644)
	if err != nil {
		panic(err)
	}

	fmt.Println("Generate vars.go with\n" +
		"Build version: " + buildInfo.Version + "\n" +
		"Build date: " + buildInfo.Date + "\n" +
		"Build commit: " + buildInfo.Commit)
}
